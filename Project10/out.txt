KEYWORD class
IDENTIFIER Main
SYMBOL {
KEYWORD function
KEYWORD void
IDENTIFIER main
SYMBOL (
SYMBOL )
SYMBOL {
KEYWORD var
KEYWORD int
IDENTIFIER result
SYMBOL ,
IDENTIFIER value
SYMBOL ;
KEYWORD do
IDENTIFIER Main
SYMBOL .
IDENTIFIER fillMemory
SYMBOL (
INT_CONST 8001
SYMBOL ,
INT_CONST 16
SYMBOL ,
SYMBOL -
INT_CONST 1
SYMBOL )
SYMBOL ;
KEYWORD let
IDENTIFIER value
SYMBOL =
IDENTIFIER Memory
SYMBOL .
IDENTIFIER peek
SYMBOL (
INT_CONST 8000
SYMBOL )
SYMBOL ;
KEYWORD do
IDENTIFIER Main
SYMBOL .
IDENTIFIER convert
SYMBOL (
IDENTIFIER value
SYMBOL )
SYMBOL ;
KEYWORD return
SYMBOL ;
SYMBOL }
KEYWORD function
KEYWORD void
IDENTIFIER convert
SYMBOL (
KEYWORD int
IDENTIFIER value
SYMBOL )
SYMBOL {
KEYWORD var
KEYWORD int
IDENTIFIER mask
SYMBOL ,
IDENTIFIER position
SYMBOL ;
KEYWORD var
KEYWORD boolean
IDENTIFIER loop
SYMBOL ;
KEYWORD let
IDENTIFIER loop
SYMBOL =
KEYWORD true
SYMBOL ;
KEYWORD while
SYMBOL (
IDENTIFIER loop
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER position
SYMBOL =
IDENTIFIER position
SYMBOL +
INT_CONST 1
SYMBOL ;
KEYWORD let
IDENTIFIER mask
SYMBOL =
IDENTIFIER Main
SYMBOL .
IDENTIFIER nextMask
SYMBOL (
IDENTIFIER mask
SYMBOL )
SYMBOL ;
KEYWORD do
IDENTIFIER Memory
SYMBOL .
IDENTIFIER poke
SYMBOL (
INT_CONST 9000
SYMBOL +
IDENTIFIER position
SYMBOL ,
IDENTIFIER mask
SYMBOL )
SYMBOL ;
KEYWORD if
SYMBOL (
SYMBOL ~
SYMBOL (
IDENTIFIER position
SYMBOL >
INT_CONST 16
SYMBOL )
SYMBOL )
SYMBOL {
KEYWORD if
SYMBOL (
SYMBOL ~
SYMBOL (
SYMBOL (
IDENTIFIER value
SYMBOL &
IDENTIFIER mask
SYMBOL )
SYMBOL =
INT_CONST 0
SYMBOL )
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER Memory
SYMBOL .
IDENTIFIER poke
SYMBOL (
INT_CONST 8000
SYMBOL +
IDENTIFIER position
SYMBOL ,
INT_CONST 1
SYMBOL )
SYMBOL ;
SYMBOL }
KEYWORD else
SYMBOL {
KEYWORD do
IDENTIFIER Memory
SYMBOL .
IDENTIFIER poke
SYMBOL (
INT_CONST 8000
SYMBOL +
IDENTIFIER position
SYMBOL ,
INT_CONST 0
SYMBOL )
SYMBOL ;
SYMBOL }
SYMBOL }
KEYWORD else
SYMBOL {
KEYWORD let
IDENTIFIER loop
SYMBOL =
KEYWORD false
SYMBOL ;
SYMBOL }
SYMBOL }
KEYWORD return
SYMBOL ;
SYMBOL }
KEYWORD function
KEYWORD int
IDENTIFIER nextMask
SYMBOL (
KEYWORD int
IDENTIFIER mask
SYMBOL )
SYMBOL {
KEYWORD if
SYMBOL (
IDENTIFIER mask
SYMBOL =
INT_CONST 0
SYMBOL )
SYMBOL {
KEYWORD return
INT_CONST 1
SYMBOL ;
SYMBOL }
KEYWORD else
SYMBOL {
KEYWORD return
IDENTIFIER mask
SYMBOL *
INT_CONST 2
SYMBOL ;
SYMBOL }
SYMBOL }
KEYWORD function
KEYWORD void
IDENTIFIER fillMemory
SYMBOL (
KEYWORD int
IDENTIFIER startAddress
SYMBOL ,
KEYWORD int
IDENTIFIER length
SYMBOL ,
KEYWORD int
IDENTIFIER value
SYMBOL )
SYMBOL {
KEYWORD while
SYMBOL (
IDENTIFIER length
SYMBOL >
INT_CONST 0
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER Memory
SYMBOL .
IDENTIFIER poke
SYMBOL (
IDENTIFIER startAddress
SYMBOL ,
IDENTIFIER value
SYMBOL )
SYMBOL ;
KEYWORD let
IDENTIFIER length
SYMBOL =
IDENTIFIER length
SYMBOL -
INT_CONST 1
SYMBOL ;
KEYWORD let
IDENTIFIER startAddress
SYMBOL =
IDENTIFIER startAddress
SYMBOL +
INT_CONST 1
SYMBOL ;
SYMBOL }
KEYWORD return
SYMBOL ;
SYMBOL }
SYMBOL }

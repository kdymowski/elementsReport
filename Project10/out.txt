KEYWORD class
IDENTIFIER SquareGame
SYMBOL {
KEYWORD field
IDENTIFIER Square
IDENTIFIER square
SYMBOL ;
KEYWORD field
KEYWORD int
IDENTIFIER direction
SYMBOL ;
KEYWORD constructor
IDENTIFIER SquareGame
IDENTIFIER new
SYMBOL (
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER square
SYMBOL =
IDENTIFIER square
SYMBOL ;
KEYWORD let
IDENTIFIER direction
SYMBOL =
IDENTIFIER direction
SYMBOL ;
KEYWORD return
IDENTIFIER square
SYMBOL ;
SYMBOL }
KEYWORD method
KEYWORD void
IDENTIFIER dispose
SYMBOL (
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER square
SYMBOL .
IDENTIFIER dispose
SYMBOL (
SYMBOL )
SYMBOL ;
KEYWORD do
IDENTIFIER Memory
SYMBOL .
IDENTIFIER deAlloc
SYMBOL (
IDENTIFIER square
SYMBOL )
SYMBOL ;
KEYWORD return
SYMBOL ;
SYMBOL }
KEYWORD method
KEYWORD void
IDENTIFIER run
SYMBOL (
SYMBOL )
SYMBOL {
KEYWORD var
KEYWORD char
IDENTIFIER key
SYMBOL ;
KEYWORD var
KEYWORD boolean
IDENTIFIER exit
SYMBOL ;
KEYWORD let
IDENTIFIER exit
SYMBOL =
IDENTIFIER key
SYMBOL ;
KEYWORD while
SYMBOL (
IDENTIFIER exit
SYMBOL )
SYMBOL {
KEYWORD while
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER key
SYMBOL =
IDENTIFIER key
SYMBOL ;
KEYWORD do
IDENTIFIER moveSquare
SYMBOL (
SYMBOL )
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER exit
SYMBOL =
IDENTIFIER exit
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER square
SYMBOL .
IDENTIFIER decSize
SYMBOL (
SYMBOL )
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER square
SYMBOL .
IDENTIFIER incSize
SYMBOL (
SYMBOL )
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER direction
SYMBOL =
IDENTIFIER exit
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER direction
SYMBOL =
IDENTIFIER key
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER direction
SYMBOL =
IDENTIFIER square
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER direction
SYMBOL =
IDENTIFIER direction
SYMBOL ;
SYMBOL }
KEYWORD while
SYMBOL (
IDENTIFIER key
SYMBOL )
SYMBOL {
KEYWORD let
IDENTIFIER key
SYMBOL =
IDENTIFIER key
SYMBOL ;
KEYWORD do
IDENTIFIER moveSquare
SYMBOL (
SYMBOL )
SYMBOL ;
SYMBOL }
SYMBOL }
KEYWORD return
SYMBOL ;
SYMBOL }
KEYWORD method
KEYWORD void
IDENTIFIER moveSquare
SYMBOL (
SYMBOL )
SYMBOL {
KEYWORD if
SYMBOL (
IDENTIFIER direction
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER square
SYMBOL .
IDENTIFIER moveUp
SYMBOL (
SYMBOL )
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER direction
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER square
SYMBOL .
IDENTIFIER moveDown
SYMBOL (
SYMBOL )
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER direction
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER square
SYMBOL .
IDENTIFIER moveLeft
SYMBOL (
SYMBOL )
SYMBOL ;
SYMBOL }
KEYWORD if
SYMBOL (
IDENTIFIER direction
SYMBOL )
SYMBOL {
KEYWORD do
IDENTIFIER square
SYMBOL .
IDENTIFIER moveRight
SYMBOL (
SYMBOL )
SYMBOL ;
SYMBOL }
KEYWORD do
IDENTIFIER Sys
SYMBOL .
IDENTIFIER wait
SYMBOL (
IDENTIFIER direction
SYMBOL )
SYMBOL ;
KEYWORD return
SYMBOL ;
SYMBOL }
SYMBOL }
